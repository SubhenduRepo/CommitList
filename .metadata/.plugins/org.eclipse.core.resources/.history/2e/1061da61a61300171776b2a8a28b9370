package com.tcs.kits.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;

import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.tcs.kits.main.JenkinsMain;

public class ExcelUtil {

	//private static final String OUTPUT_FILE_NAME = "D:\\MyFirstExcel.xlsx";
	private static final String OUTPUT_FILE_NAME1 = "D:\\Commit list from"+JenkinsMain.argu0+" to "+JenkinsMain.argu1+".xlsx";
	private static final String OUTPUT_FILE_NAME = "D:\\Stories in "+JenkinsMain.argu1+".xlsx";
	//private static final String INPUT_FILE_NAME = "D:\\Commit List from tag 57 to 88.xlsx";

	public Boolean ExcelwriterJStories(ArrayList<ArrayList<String>> board2) {
		
		JiraUtil jiraUtil = new JiraUtil();
		Boolean isCompleted=false;
		String newWorkSheeetName =null;
		XSSFWorkbook workbook = new XSSFWorkbook();
		for (int j=0; j<board2.size(); j++){

			String concatString = null;
			XSSFSheet sheet = workbook.createSheet("TestSheet"+j);
			
			XSSFCellStyle headingStyle = workbook.createCellStyle();
			XSSFCellStyle dataStyle = workbook.createCellStyle();
			XSSFCellStyle modifiedDataStyle = workbook.createCellStyle();
			XSSFCellStyle finalDataStyle = workbook.createCellStyle();
			
			headingStyle = ExcelStyles.headingStyles(headingStyle, workbook);
			dataStyle =  ExcelStyles.dataStyles(dataStyle);
			modifiedDataStyle = ExcelStyles.modifiedSyles(modifiedDataStyle);
			
			XSSFFont headerFont = workbook.createFont();
			


			int rowNum=0;
			Row row = sheet.createRow(rowNum++);
			row = ExcelHeaderData.ExcelwriterJStoriesHeaderData(row,headingStyle);
			

			sheet = ExcelStyles.sheetWidths(sheet, 5);


			for (int i = 0 ; i<board2.get(j).size() ; i++){
				concatString=board2.get(j).get(i);
				ArrayList<String> excelData = new ArrayList<String>();
				excelData = jiraUtil.splitter(concatString);
				Iterator itr = excelData.iterator();
				if (!(excelData.get(2)).equalsIgnoreCase("DONE") && !(excelData.get(2)).equalsIgnoreCase("RESOLVED"))
				{
					finalDataStyle = modifiedDataStyle;
				}else{
					finalDataStyle = dataStyle;
				}


				Row row1 = sheet.createRow(rowNum++);

				int colNum1=0;
				Boolean setColorFlag = false;

				while (itr.hasNext())
				{
					String value = itr.next().toString();
					if (colNum1 ==0 && rowNum ==2)
					{
						newWorkSheeetName = value.substring(0, value.indexOf("-"));
					}

					Cell cell6 = row1.createCell(colNum1++);


					cell6.setCellValue(value);
					cell6.setCellStyle(finalDataStyle);
				}

				workbook.setSheetName(workbook.getSheetIndex(sheet),newWorkSheeetName );
			}

		}



		try {
			FileOutputStream outputStream = new FileOutputStream(OUTPUT_FILE_NAME);
			workbook.write(outputStream);
			workbook.close();
			isCompleted=true;
			System.out.println("Stories Excel sheet populated with jira details of all boards");
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return isCompleted;
	}
	
	
	


	public void   ExcelUpdateNonJira(ArrayList<ArrayList<String>> nonJiraDetails) {

		FileInputStream fsIP;
		Boolean isCompleted=false;
		String newWorkSheeetName =null;
		try {
			fsIP = new FileInputStream(new File(OUTPUT_FILE_NAME));
			XSSFWorkbook workbook = new XSSFWorkbook(fsIP);
			XSSFSheet sheet = workbook.createSheet("Non_Jira_Stories");
			XSSFCellStyle headingStyle = workbook.createCellStyle();
			XSSFCellStyle dataStyle = workbook.createCellStyle();

			headingStyle = ExcelStyles.headingStyles(headingStyle, workbook);
			dataStyle = ExcelStyles.dataStyles(dataStyle);


			int rowNum=0;
			Row row = sheet.createRow(rowNum++);
			row = ExcelHeaderData.nonJiraAndCommitListHeaderData(row, headingStyle);



			sheet = ExcelStyles.sheetWidths(sheet, 4);

			for (int i = 0 ; i<nonJiraDetails.size() ; i++){
				Row row1 = sheet.createRow(rowNum++);
				Iterator itr = nonJiraDetails.get(i).iterator();
				int colNum=0;
				while(itr.hasNext()){
					String value = itr.next().toString();
					Cell cell6 = row1.createCell(colNum++);


					cell6.setCellValue(value);
					cell6.setCellStyle(dataStyle);
				}


			}
			FileOutputStream output_file =new FileOutputStream(new File(OUTPUT_FILE_NAME));  //Open FileOutputStream to write updates
            
            workbook.write(output_file); //write changes
              
            output_file.close();
            System.out.println("Stories excel updated with non-jira list");

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}



	




	public void excelWriterCL(ArrayList<ArrayList<String>> csvArrayTotal)
	{
		long startTime = System.currentTimeMillis();
		String newWorkSheeetName =null;
		XSSFWorkbook workbook = new XSSFWorkbook();


		XSSFSheet sheet = workbook.createSheet("CommitList");


		XSSFCellStyle headingStyle = workbook.createCellStyle();
		XSSFCellStyle dataStyle = workbook.createCellStyle();

		headingStyle = ExcelStyles.headingStyles(headingStyle, workbook);
		dataStyle = ExcelStyles.dataStyles(dataStyle);


		


		int rowNum=0;
		Row row = sheet.createRow(rowNum++);
		row = ExcelHeaderData.nonJiraAndCommitListHeaderData(row, headingStyle);

		sheet = ExcelStyles.sheetWidths(sheet, 4);



		for (int j=0; j<csvArrayTotal.size(); j++)
		{
			int colNum1=0;

			if(!(csvArrayTotal.get(j).get(3).equals("noNeed")))
			{
				Row row1 = sheet.createRow(rowNum++);
				for (int i = 0 ; i<csvArrayTotal.get(j).size() ; i++){
					//System.out.println("value from List::"+csvArrayTotal.get(j).get(i));


					Cell cell5 = row1.createCell(colNum1++);


					cell5.setCellValue(csvArrayTotal.get(j).get(i));
					cell5.setCellStyle(dataStyle);
				}
			}
		}

		try {
			FileOutputStream outputStream = new FileOutputStream(OUTPUT_FILE_NAME1);
			workbook.write(outputStream);
			workbook.close();
			long endTime = System.currentTimeMillis();
			float totalTime=(endTime - startTime)/1000;
			System.out.println("Commit List excel creation completed in "+totalTime+ " seconds");
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}
	
	
	
	
}
